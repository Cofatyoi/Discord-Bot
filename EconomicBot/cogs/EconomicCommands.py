import disnake
from disnake.ext import commands
import random as r
import logging
import time
from Data_processing import CooldownProcessing, SQLProcessing

class EconomicCommands(commands.Cog):
    def __init__(self, bot: commands.Bot, conn):
        self.bot = bot
        self.conn = conn

    @commands.Cog.listener()
    async def on_slash_command_error(self, inter, error):
        if isinstance(error, commands.CommandOnCooldown):
            seconds = error.retry_after
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            embed = disnake.Embed(
                title='–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–µ.',
                description=f'–°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ `{int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥`',
                colour=disnake.Colour.blurple()
            )
            await inter.send(embed=embed, ephemeral=True)

    @commands.slash_command(
            name="dailybonus",
            description="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"
    )
    @commands.cooldown(1, 86400, commands.BucketType.member)
    async def DailyBonus(self, inter):
        try:
            user = inter.user
            amount = r.randint(100, 1000)
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'dailybonus' –∏ –ø–æ–ª—É—á–∏–ª {amount} üåï")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalUser(self, user)
            cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (amount, user.id))
            self.conn.commit()
            cursor.close()

            await inter.send(embed=disnake.Embed(
                title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω!",
                description=f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–æ–º–º–∞–Ω–¥—É {user.global_name}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} üåï.",
                color=disnake.Colour.og_blurple()
            ))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ dailybonus: {e}")

    @commands.slash_command(
            name="classes",
            description="Senior: 25küåï, Middle: 15küåï, Junior: 10küåï"
    )
    async def classes(self, inter, classes: str = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏.", choices=["Senior", "Middle", "Junior"])):
        try:
            user = inter.user
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'classes'")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalUser(self, user)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))
            profile_data = cursor.fetchone()

            for ecclass, cost, mult in [["Senior", 25000, 3], ["Middle", 15000, 2], ["Junior", 7500, 1.5]]:
                if classes == ecclass:  # –ï—Å–ª–∏ –∫–ª–∞—Å—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∫–ª–∞—Å—Å–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞
                    if profile_data[0] >= cost:  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª–∞—Å—Å–∞
                        cursor.execute("UPDATE users SET ecclass = ? WHERE id = ?", (classes, user.id))
                        logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'classes' –∏ –∫—É–ø–∏–ª –∫–ª–∞—Å—Å {classes} –∑–∞ {cost} üåï")
                        cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (cost, user.id))
                        self.conn.commit()
                        cursor.close()

                        await inter.send(embed=disnake.Embed(
                            title=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–ª–∞—Å—Å {classes}!",
                            description=f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å x{mult} –ª—É–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, 3D –î–∏–∑–∞–π–Ω–µ—Ä, 2D –î–∏–∑–∞–π–Ω–µ—Ä'",
                            color=disnake.Colour.og_blurple()
                        ))

                    else:
                        await inter.send(embed=disnake.Embed(
                            title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã **classes**",
                            description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–ª–∞—Å—Å–∞ {classes}",
                            color=disnake.Colour.og_blurple()
                        ))
                    return
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ classes: {e}")

    @commands.slash_command(
            name="job",
            description="–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –≤–∞—à—É —Ä–∞–±–æ—Ç—É. –†–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤"
    )

    @commands.cooldown(1, (28800), commands.BucketType.user)
    async def job(self, inter, job: str = commands.Param(description='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.', choices=['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '3D –î–∏–∑–∞–π–Ω–µ—Ä', '2D –î–∏–∑–∞–π–Ω–µ—Ä', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥', '–°—Ç–æ–ª—è—Ä', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'])):
        try:
            user = inter.user

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalUser(self, user)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))
            profile_data = cursor.fetchone()

            if job != profile_data[4]:
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **job**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç—É —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–±–æ—Ç–∞ —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞'",
                    color=disnake.Colour.og_blurple()
                ))
                return
                
            
            jobs = profile_data[4]
            classes = profile_data[3]
            for i, min, max in [["3D –î–∏–∑–∞–π–Ω–µ—Ä", 500, 1500], ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 1000, 3000], ["2D –î–∏–∑–∞–π–Ω–µ—Ä", 750, 2000], ["–°—Ç—Ä–æ–∏—Ç–µ–ª—å", 1000, 2500], ["–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", 500, 1000], ["–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥", 750, 2000], ["–°—Ç–æ–ª—è—Ä", 1250, 2750], ["–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", 750, 2000]]:
                if job == i and job == jobs:
                    amount = r.randint(min, max)
                    if job == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' and classes == "Senior":
                        amount = amount * 3
                    elif classes == "Middle":
                        amount = amount * 2
                    elif classes == "Junior":
                        amount = amount * 1.5
                    amount_rep = r.randint(1, 10)

                    cursor.execute("UPDATE users SET cash = cash + ?, rep = rep + ? WHERE id = ?", (amount, amount_rep, user.id))
                    self.conn.commit()
                    cursor.close()

                    logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'job' –∏ –∑–∞—Ä–æ–±–æ—Ç–∞–ª {amount} üåï")

                    await inter.send(embed=disnake.Embed(
                        title="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏!",
                        description=f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —Å—Ñ–µ—Ä–µ {job}! –ó–∞ —ç—Ç–∏ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} üåï. –¢–∞–∫ –∂–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {amount_rep} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–æ–º–º–∞–Ω–¥—É 8 —á–∞—Å–æ–≤",
                        color=disnake.Colour.og_blurple()
                    ))
    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ job: {e}")

    @commands.slash_command(
        name="send",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É"
    )
    async def send(self, inter, member: disnake.Member, amount: commands.Range[int, 0, 10000] = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")):
        try:
            user = inter.user
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–≥—Ä–æ–∫—É {member.global_name}, {amount} üåï")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member)
            SQLProcessing.CheckEconomicalUser(self, user)
            user_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))  # user its member who use the command
            user_data = cursor.fetchone()

            if user.id == member.id:  # If user send money for himself
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **send**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏",
                    color=disnake.Colour.og_blurple()
                ))
                return
            if user_data[0] < amount:  # If user write a amount > himself cash
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **send**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ –∏–±–æ –æ–Ω–∞ –ø—Ä–∏–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å",
                    color=disnake.Colour.og_blurple()
                ))
                return
            
            cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (amount, member.id))
            cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (amount, user.id))
            self.conn.commit()
            cursor.close()

            await inter.send(embed=disnake.Embed(
                title="–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
                description=f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {member.global_name} —Å—É–º–º—É –≤ {amount} üåï",
                color=disnake.Colour.og_blurple()
            ))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ send: {e}")

    #Command "Profile"

    @commands.slash_command(
            name="profile",
            description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"
    )
    async def profile(self, inter, member: disnake.Member):
        try:
            logging.info(f"–ë—ã–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {member.global_name}")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (member.id,))
            profile_data = cursor.fetchone()

            await inter.send(
                embed=disnake.Embed(
                    title=f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member.global_name}**",
                    description=(
                        " ``–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`` \n"
                        f"``` –ë–∞–ª–∞–Ω—Å: {profile_data[0]} ```"
                        f"``` –£—Ä–æ–≤–µ–Ω—å: {profile_data[2]} ```"
                        f"``` –†–µ–ø—É—Ç–∞—Ü–∏—è: {profile_data[1]} ```"
                        f"``` –ö–ª–∞—Å—Å: {profile_data[3]} ```"
                        f"``` –†–∞–±–æ—Ç–∞: {profile_data[4]} ```"),
                        color=disnake.Colour.og_blurple()),
                        )

            self.conn.commit()
            cursor.close()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ profile: {e}")