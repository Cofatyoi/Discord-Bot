import disnake
from disnake.ext import commands
import random as r
import logging
from Data_processing import SQLProcessing, Job, Embed, ShopsConfig, Buy_things

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="a", encoding='utf-8', format="%(asctime)s %(levelname)s %(message)s")

class EconomicCommands(commands.Cog, disnake.ui.View):
    def __init__(self, bot: commands.Bot, conn):
        self.bot = bot
        self.conn = conn

    @commands.Cog.listener()
    async def on_slash_command_error(self, inter, error):
        if isinstance(error, commands.CommandOnCooldown):
            seconds = error.retry_after
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds = seconds % 60
            embed = disnake.Embed(
                title='–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–µ.',
                description=f'–°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ `{int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥`',
                colour=disnake.Colour.blurple()
            )
            await inter.send(embed=embed, ephemeral=True)

    @commands.slash_command(name="dailybonus", description="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
    @commands.cooldown(1, 86400, commands.BucketType.member)
    async def DailyBonus(self, inter):
        try:
            user = inter.user
            amount = r.randint(100, 1000)
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'dailybonus' –∏ –ø–æ–ª—É—á–∏–ª {amount} üåï")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member=user)
            cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (amount, user.id))
            self.conn.commit()
            cursor.close()

            await inter.send(embed=disnake.Embed(
                title="–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω!",
                description=f"–°–ø–∞—Å–∏–±–æ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∫–æ–º–º–∞–Ω–¥—É {user.global_name}! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} üåï.",
                color=disnake.Colour.og_blurple()
            ))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ dailybonus: {e}")

    @commands.slash_command(name="buy_things", description="–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫—É–ø–∏—Ç—å –≤–µ—â–∏ –∏–∑ –º–µ–Ω—é /shop")
    async def buy_things(self, inter, classes: str = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏. 'Skip' - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞", choices=["Senior", "Middle", "Junior", "Skip"]), jobs: str = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É. 'Skip' - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞", choices=["3D –î–∏–∑–∞–π–Ω–µ—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "2D –î–∏–∑–∞–π–Ω–µ—Ä", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å", "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥", "–°—Ç–æ–ª—è—Ä", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", "–°—Ç—Ä–∏–º–µ—Ä", "–Æ—Ç—É–±–µ—Ä", "Skip"])):
        try:
            user = inter.user
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–º–∞–Ω–¥—É 'buy_things'")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member=user)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))
            profile_data = cursor.fetchone()
            ClassCost = Buy_things.ClassCost(ClassList=ShopsConfig.Classes.class_list)
            JobCost = Buy_things.JobCost(JobList=Job.jobs_list)

            if classes != "Skip":
                if ClassCost >= profile_data[0]:
                    cursor.execute("UPDATE users SET cash = cash - ?, ecclass = ? WHERE id = ?", (ClassCost, classes, user.id))
                    logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –ø—Ä–∏–æ–±—Ä—ë–ª –∫–ª–∞—Å—Å {classes} –∑–∞ {ClassCost} üåï") 
                else:
                    await inter.send(embed=disnake.Embed(
                        title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **buy_things**",
                        description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥",
                        color=disnake.Colour.og_blurple()
                    ))
            else:
                return None
            
            if jobs != "Skip":
                if JobCost >= profile_data[1]:
                    cursor.execute("UPDATE users SET job = ? WHERE id = ?", (jobs, user.id))
                    logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –ø–æ—Å—Ç–∞–≤–∏–ª —Å–µ–±–µ —Ä–∞–±–æ—Ç—É {jobs} –∑–∞ {JobCost} üåï") 
                else:
                    await inter.send(embed=disnake.Embed(
                        title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **buy_things**",
                        description=f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                        color=disnake.Colour.og_blurple()
                    ))
            else:
                return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ buy_things: {e}")

    @commands.slash_command(name="job", description="–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –≤–∞—à—É —Ä–∞–±–æ—Ç—É. –†–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤")
    @commands.cooldown(1, (28800), commands.BucketType.user)
    async def job(self, inter, job: str = commands.Param(description='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.', choices=['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '3D –î–∏–∑–∞–π–Ω–µ—Ä', '2D –î–∏–∑–∞–π–Ω–µ—Ä', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥', '–°—Ç–æ–ª—è—Ä', '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'])):
        try:
            user = inter.user

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member=user)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))
            profile_data = cursor.fetchone()

            if job != profile_data[4]:
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **job**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç—É —É –≤–∞—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ! –ï—Å–ª–∏ —É –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–±–æ—Ç–∞ —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞'",
                    color=disnake.Colour.og_blurple()
                ))
                return
                
            classes = profile_data[3]
            for job_info in Job.jobs_list:
                if job == job_info["name"]:
                    amount = Job.Multiplier(job_info["min"], job_info["max"], job, classes)
                    cursor.execute("UPDATE users SET cash = cash + ?, rep = rep + ? WHERE id = ?", (amount, job_info["rep"], user.id))
                    self.conn.commit()
                    cursor.close()

                    logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É 'job' –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {amount} üåï")

                    await inter.send(embed=disnake.Embed(
                        title="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏!",
                        description=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤ —Å—Ñ–µ—Ä–µ {job}! –ó–∞ —ç—Ç–∏ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} üåï. –¢–∞–∫–∂–µ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {job_info['rep']} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –ø–æ—ç—Ç–æ–º—É —É –≤–∞—Å –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–æ–º–∞–Ω–¥—É 8 —á–∞—Å–æ–≤.",
                        color=disnake.Colour.blurple()
                    ))
                    return
    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ job: {e}")

    @commands.slash_command(name="send", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É")
    async def send(self, inter, member: disnake.Member, amount: commands.Range[int, 0, 10000] = commands.Param(description="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")):
        try:
            user = inter.user
            logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.global_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–≥—Ä–æ–∫—É {member.global_name}, {amount} üåï")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member)
            SQLProcessing.CheckEconomicalMember(self, member=user)
            user_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (user.id,))  # user its member who use the command
            user_data = cursor.fetchone()

            if user.id == member.id:  # If user send money for himself
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **send**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è —á—Ç–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏",
                    color=disnake.Colour.og_blurple()
                ))
                return
            if user_data[0] < amount:  # If user write a amount > himself cash
                await inter.send(embed=disnake.Embed(
                    title="–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã **send**",
                    description=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ –∏–±–æ –æ–Ω–∞ –ø—Ä–∏–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å",
                    color=disnake.Colour.og_blurple()
                ))
                return
            
            cursor.execute("UPDATE users SET cash = cash + ? WHERE id = ?", (amount, member.id))
            cursor.execute("UPDATE users SET cash = cash - ? WHERE id = ?", (amount, user.id))
            self.conn.commit()
            cursor.close()

            await inter.send(embed=disnake.Embed(
                title="–î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
                description=f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {member.global_name} —Å—É–º–º—É –≤ {amount} üåï",
                color=disnake.Colour.og_blurple()
            ))

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ send: {e}")

    @commands.slash_command(name="profile", description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞")
    async def profile(self, inter, member: disnake.Member):
        try:
            logging.info(f"–ë—ã–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ {member.global_name}")

            cursor = self.conn.cursor()
            SQLProcessing.CheckEconomicalMember(self, member)
            SQLProcessing.CheckLvlMember(self, member)
            profile_data = cursor.execute("SELECT cash, rep, lvl, ecclass, job FROM users WHERE id = ?", (member.id,))
            profile_data = cursor.fetchone()
            lvl = profile_data[2]
            level_up = 1 * lvl**2 + 15 * lvl + 15

            embed=disnake.Embed(
                title=f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member.global_name}**",
                color=disnake.Colour.og_blurple()
                )
            
            Embed.author(embed=embed, member=member)

            embed.add_field(name="**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**", value=f"``` –£—Ä–æ–≤–µ–Ω—å: {profile_data[2]} | > {level_up} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏```" + f"``` –†–µ–ø—É—Ç–∞—Ü–∏—è: {profile_data[1]} ```", inline=True)
            embed.add_field(name="**–≠–∫–æ–Ω–æ–º–∏–∫–∞**", value=f"``` –ë–∞–ª–∞–Ω—Å: {profile_data[0]} ```" + f"``` –†–∞–±–æ—Ç–∞: {profile_data[4]} ```" + f"``` –ö–ª–∞—Å—Å: {profile_data[3]} ```", inline=True)
            await inter.response.send_message(embed=embed)

            self.conn.commit()
            cursor.close()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ profile: {e}")

    @commands.slash_command(name="shop", description="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω –ø–æ–∫—É–ø–æ–∫")
    async def shop(self, inter):
        try:
            options = [
                disnake.SelectOption(label="Classes", value="classes", description="–ü–æ–∫—É–ø–∫–∞ –∫–ª–∞—Å—Å–æ–≤"),
                disnake.SelectOption(label="Jobs", value="jobs", description="–í—ã–±–æ—Ä —Ä–∞–±–æ—Ç –ø–æ —É—Ä–æ–≤–Ω—é"),
                disnake.SelectOption(label="Donate", value="donate", description="–ü–æ–∫—É–ø–∫–∞ –¥–æ–Ω–∞—Ç –≤–∞–ª—é—Ç—ã"),
                disnake.SelectOption(label="Custom Roles", value="customroles", description="–ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ä–æ–ª–µ–π –∑–∞ –∏–≥—Ä–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏!")
            ]

            Shops = disnake.ui.Select(
                placeholder="–í—ã–±–æ—Ä",
                options=options,
                min_values=1,
                max_values=1
            )
            view = disnake.ui.View()
            view.add_item(Shops)

            async def shop_callback(inter):
                selected_value = Shops.values[0]
                if selected_value == "classes":
                    embed = disnake.Embed(title="üô§‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´‚åú –ö–õ–ê–°–°–´ ‚åü‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüô¶", color=disnake.Colour.og_blurple())
                    ShopsConfig.Classes.List(embed=embed)
                    await inter.response.edit_message(" ", embed=embed, view=view)

                elif selected_value == "jobs":
                    embed = disnake.Embed(title="üô§‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´‚åú –†–ê–ë–û–¢–´ ‚åü‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüô¶", color=disnake.Colour.og_blurple())
                    ShopsConfig.Jobs.List(embed=embed)
                    await inter.response.edit_message(" ", embed=embed, view=view)

                elif selected_value == "donate":
                    embed = disnake.Embed(title="üô§‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´‚åú –î–û–ù–ê–¢ ‚åü‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüô¶", color=disnake.Colour.og_blurple())
                    ShopsConfig.Donate.List(embed=embed)
                    await inter.response.edit_message(" ", embed=embed, view=view)

                elif selected_value == "customroles":
                    embed = disnake.Embed(title="üô§‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´‚åú –ö–ê–°–¢–û–ú–ù–´–ï –†–û–õ–ò ‚åü‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüô¶", color=disnake.Colour.og_blurple())
                    ShopsConfig.CustomRole.List(embed=embed)
                    await inter.response.edit_message(" ", embed=embed, view=view)
                
            Shops.callback = shop_callback

            await inter.response.send_message("–í—ã–±–∏—Ä–µ—Ç–µ —Ç–∏–ø –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", view=view)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–º–∞–Ω–¥–µ shop: {e}")